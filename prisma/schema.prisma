generator client {
    provider        = "prisma-client-js"
    previewFeatures = []
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum SenderType {
    DEVICE
    APP
}

model UserAPIKey {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    apiKey    String   @unique
    createdAt DateTime @default(now())
}

model User {
    id           Int          @id @default(autoincrement())
    email        String       @unique
    name         String
    passwordHash String
    UserAPIKey   UserAPIKey[]
}

model Sender {
    id                  Int                   @id @default(autoincrement())
    type                SenderType
    ip                  String                @unique @default("")
    mac                 String                @unique @default("")
    hostname            String                @unique @default("")
    applicationName     String                @unique @default("")
    lastSeen            DateTime              @default(now())
    AuthTokens          AuthToken[]
    ResourceStats       ResourceStats[]
    ScriptRunnerRequest ScriptRunnerRequest[]
    WatchingFile        WatchingFile[]
}

model AuthToken {
    id       String @id @default(uuid())
    token    String
    senderId Int
    sender   Sender @relation(fields: [senderId], references: [id])
}

enum EventType {
    create
    access
    delete
    write
}

model WatchingFile {
    id       Int    @id @default(autoincrement())
    FileName String

    senderId Int
    sender   Sender @relation(fields: [senderId], references: [id])
}

model FileIntegrityMonitor {
    id        Int       @id @default(autoincrement())
    FileName  String
    EventType EventType
    Timestamp Int
}

model ResourceStats {
    id               Int  @id @default(autoincrement())
    CPUStats         Json @default("[]")
    MemStat          Json @default("{}")
    DiskStats        Json @default("[]")
    TemperatureStats Json @default("[]")
    NetStat          Json @default("{}")
    HostInfo         Json @default("{}")
    Timestamp        Int

    senderId Int
    sender   Sender @relation(fields: [senderId], references: [id])
}

enum ScriptRunnerStatus {
    pending
    done
}

model ScriptRunnerRequest {
    id     Int                @id @default(autoincrement()) // task id
    Script String
    Args   String[]
    Status ScriptRunnerStatus @default(pending)

    senderId           Int
    sender             Sender               @relation(fields: [senderId], references: [id])
    ScriptRunnerResult ScriptRunnerResult[]
}

model ScriptRunnerResult {
    id Int @id @default(autoincrement())

    Output   String
    Error    String
    Success  Boolean
    ExitCode Int

    scriptRunnerRequestId Int // task id
    scriptRunnerRequest   ScriptRunnerRequest @relation(fields: [scriptRunnerRequestId], references: [id])
}
