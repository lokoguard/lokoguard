generator client {
    provider        = "prisma-client-js"
    previewFeatures = []
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Models for Management Users for Lokoguard
model UserAPIKey {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    apiKey    String   @unique
    createdAt DateTime @default(now())
}

model User {
    id           Int          @id @default(autoincrement())
    email        String       @unique
    name         String
    passwordHash String
    UserAPIKey   UserAPIKey[]
}

// Models for Lokoguard Agents

enum SenderType {
    DEVICE
    APP
}

// Sender can be a device (server, laoptop, etc) or an app (mobile app, desktop app, web app)
model Sender {
    id                  Int                   @id @default(autoincrement())
    type                SenderType
    ip                  String                @unique @default("")
    mac                 String                @unique @default("")
    hostname            String                @unique @default("")
    applicationName     String                @unique @default("")
    lastSeen            DateTime              @default(now())
    authTokens          AuthToken[]
    resourceStats       ResourceStats[]
    scriptRunnerRequest ScriptRunnerRequest[]
    fileWatchers        FileWatcher[]
    logMessages         LogMessage[]
}

// AuthToken is used to authenticate the sender
// It's restricted to only submit result to server
// So, for apps, it's a allowed to expose to public
model AuthToken {
    id       String @id @default(uuid())
    token    String
    senderId Int
    sender   Sender @relation(fields: [senderId], references: [id])
}

// File access monitoring
model FileWatcher {
    id       Int    @id @default(autoincrement())
    FileName String

    senderId Int
    sender   Sender @relation(fields: [senderId], references: [id])
}

enum FileAccessEventType {
    create
    access
    delete
    write
}

model FileAccessEvent {
    id        Int                 @id @default(autoincrement())
    fileName  String
    eventType FileAccessEventType
    timestamp Int
}

// Resource monitoring
model ResourceStats {
    id               Int  @id @default(autoincrement())
    cpuStats         Json @default("[]")
    memStat          Json @default("{}")
    diskStats        Json @default("[]")
    temperatureStats Json @default("[]")
    netStat          Json @default("{}")
    hostInfo         Json @default("{}")
    timestamp        Int

    senderId Int
    sender   Sender @relation(fields: [senderId], references: [id])
}

// Script runner

enum ScriptRunnerStatus {
    pending
    done
}

model ScriptRunnerRequest {
    id     Int                @id @default(autoincrement()) // task id
    script String
    args   String[] // example - ["arg1", "arg2"]
    status ScriptRunnerStatus @default(pending)

    senderId Int
    sender   Sender @relation(fields: [senderId], references: [id])

    result ScriptRunnerResult?
}

model ScriptRunnerResult {
    id Int @id @default(autoincrement())

    output   String
    error    String
    success  Boolean
    exitCode Int

    scriptRunnerRequest   ScriptRunnerRequest @relation(fields: [scriptRunnerRequestId], references: [id])
    scriptRunnerRequestId Int                 @unique
}

// Syslog messages
model LogMessage {
    id              Int    @id @default(autoincrement()) // task id
    version         Int
    facilityMessage String
    facilityLevel   String
    severityMessage String
    severityLevel   String
    hostname        String
    appname         String
    message         String
    timestamp       Int
    senderId        Int
    sender          Sender @relation(fields: [senderId], references: [id])
}
